// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BedstedFinalProject.Models
{
    public partial class FinancialInstitutionContext : DbContext
    {
        public FinancialInstitutionContext()
        {
        }

        public FinancialInstitutionContext(DbContextOptions<FinancialInstitutionContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Withdrawl> Withdrawls { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Account");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(10)
                    .HasColumnName("AccountID")
                    .IsFixedLength();

                entity.Property(e => e.AccountBalance).HasColumnType("smallmoney");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Account");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Transactions>(entity =>
            {
                entity.ToTable("Transaction");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(10)
                    .HasColumnName("TransactionID")
                    .IsFixedLength();

                entity.Property(e => e.AccountIdgiver)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("AccountIDGiver")
                    .IsFixedLength();

                entity.Property(e => e.AccountIdreciever)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("AccountIDReciever")
                    .IsFixedLength();

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.TransactionAmount).HasColumnType("smallmoney");

                entity.HasOne(d => d.AccountIdgiverNavigation)
                    .WithMany(p => p.TransactionAccountIdgiverNavigations)
                    .HasForeignKey(d => d.AccountIdgiver)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tranasaction_Account_1");

                entity.HasOne(d => d.AccountIdrecieverNavigation)
                    .WithMany(p => p.TransactionAccountIdrecieverNavigations)
                    .HasForeignKey(d => d.AccountIdreciever)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transaction_Account_2");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transaction_Employee");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserdId);

                entity.ToTable("User");

                entity.Property(e => e.UserdId)
                    .HasMaxLength(50)
                    .HasColumnName("UserdID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Withdrawl>(entity =>
            {
                entity.ToTable("Withdrawl");

                entity.Property(e => e.WithdrawlId)
                    .HasMaxLength(10)
                    .HasColumnName("WithdrawlID")
                    .IsFixedLength();

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("AccountID")
                    .IsFixedLength();

                entity.Property(e => e.WithdrawlAmount).HasColumnType("smallmoney");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Withdrawls)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Withdrawl_Account");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}